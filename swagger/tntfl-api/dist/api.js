/**
 * TNTFL
 * Table Football Ladder
 *
 * OpenAPI spec version: 5.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://www.int.corefiling.com/~tlr/tntfl".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
})();
exports.BaseAPI = BaseAPI;
;
/**
 * GamesApi - fetch parameter creator
 */
exports.GamesApiFetchParamCreator = {
    /**
     * Add a game
     * Add a game.
     * @param redPlayer The player on red
     * @param redScore The red team score
     * @param bluePlayer The player on blue
     * @param blueScore The blue team score
     */
    addGame: function (params, options) {
        // verify required parameter "redPlayer" is set
        if (params["redPlayer"] == null) {
            throw new Error("Missing required parameter redPlayer when calling addGame");
        }
        // verify required parameter "redScore" is set
        if (params["redScore"] == null) {
            throw new Error("Missing required parameter redScore when calling addGame");
        }
        // verify required parameter "bluePlayer" is set
        if (params["bluePlayer"] == null) {
            throw new Error("Missing required parameter bluePlayer when calling addGame");
        }
        // verify required parameter "blueScore" is set
        if (params["blueScore"] == null) {
            throw new Error("Missing required parameter blueScore when calling addGame");
        }
        var baseUrl = "/game/add/json";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "redPlayer": params["redPlayer"],
            "redScore": params["redScore"],
            "bluePlayer": params["bluePlayer"],
            "blueScore": params["blueScore"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Add a game
     * Add a game.
     * @param redPlayer The player on red
     * @param redScore The red team score
     * @param bluePlayer The player on blue
     * @param blueScore The blue team score
     */
    addGameRedirect: function (params, options) {
        // verify required parameter "redPlayer" is set
        if (params["redPlayer"] == null) {
            throw new Error("Missing required parameter redPlayer when calling addGameRedirect");
        }
        // verify required parameter "redScore" is set
        if (params["redScore"] == null) {
            throw new Error("Missing required parameter redScore when calling addGameRedirect");
        }
        // verify required parameter "bluePlayer" is set
        if (params["bluePlayer"] == null) {
            throw new Error("Missing required parameter bluePlayer when calling addGameRedirect");
        }
        // verify required parameter "blueScore" is set
        if (params["blueScore"] == null) {
            throw new Error("Missing required parameter blueScore when calling addGameRedirect");
        }
        var baseUrl = "/game/add";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "redPlayer": params["redPlayer"],
            "redScore": params["redScore"],
            "bluePlayer": params["bluePlayer"],
            "blueScore": params["blueScore"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get a game
     * Get a game.
     * @param gameId Timestamp of the game
     */
    getGame: function (params, options) {
        // verify required parameter "gameId" is set
        if (params["gameId"] == null) {
            throw new Error("Missing required parameter gameId when calling getGame");
        }
        var baseUrl = "/game/{gameId}/json"
            .replace("{" + "gameId" + "}", "" + params["gameId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get games
     * Get games.
     * @param begin Timestamp to filter from.
     * @param end Timestamp to filter to.
     */
    getGames: function (params, options) {
        // verify required parameter "begin" is set
        if (params["begin"] == null) {
            throw new Error("Missing required parameter begin when calling getGames");
        }
        // verify required parameter "end" is set
        if (params["end"] == null) {
            throw new Error("Missing required parameter end when calling getGames");
        }
        var baseUrl = "/games/{begin}/{end}/json"
            .replace("{" + "begin" + "}", "" + params["begin"])
            .replace("{" + "end" + "}", "" + params["end"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get shared games
     * Get shared games.
     * @param player1 Name of player 1
     * @param player2 Name of player 2
     */
    getHeadToHeadGames: function (params, options) {
        // verify required parameter "player1" is set
        if (params["player1"] == null) {
            throw new Error("Missing required parameter player1 when calling getHeadToHeadGames");
        }
        // verify required parameter "player2" is set
        if (params["player2"] == null) {
            throw new Error("Missing required parameter player2 when calling getHeadToHeadGames");
        }
        var baseUrl = "/headtohead/{player1}/{player2}/games/json"
            .replace("{" + "player1" + "}", "" + params["player1"])
            .replace("{" + "player2" + "}", "" + params["player2"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get game punditry
     * Get game punditry.
     * @param at CSV of timestamps
     */
    getPunditry: function (params, options) {
        // verify required parameter "at" is set
        if (params["at"] == null) {
            throw new Error("Missing required parameter at when calling getPunditry");
        }
        var baseUrl = "/pundit/json";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "at": params["at"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get recent games
     * Get recent games.
     * @param limit Maximum number of games to return
     */
    getRecent: function (params, options) {
        var baseUrl = "/recent/json";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "limit": params["limit"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Predict the outcome of a game
     * Predict the outcome of a game.
     * @param redElo Elo of red player
     * @param blueElo Elo of blue player
     */
    predict: function (params, options) {
        // verify required parameter "redElo" is set
        if (params["redElo"] == null) {
            throw new Error("Missing required parameter redElo when calling predict");
        }
        // verify required parameter "blueElo" is set
        if (params["blueElo"] == null) {
            throw new Error("Missing required parameter blueElo when calling predict");
        }
        var baseUrl = "/predict/{redElo}/{blueElo}/json"
            .replace("{" + "redElo" + "}", "" + params["redElo"])
            .replace("{" + "blueElo" + "}", "" + params["blueElo"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * GamesApi - functional programming interface
 */
exports.GamesApiFp = {
    /**
     * Add a game
     * Add a game.
     * @param redPlayer The player on red
     * @param redScore The red team score
     * @param bluePlayer The player on blue
     * @param blueScore The blue team score
     */
    addGame: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.addGame(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Add a game
     * Add a game.
     * @param redPlayer The player on red
     * @param redScore The red team score
     * @param bluePlayer The player on blue
     * @param blueScore The blue team score
     */
    addGameRedirect: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.addGameRedirect(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get a game
     * Get a game.
     * @param gameId Timestamp of the game
     */
    getGame: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.getGame(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get games
     * Get games.
     * @param begin Timestamp to filter from.
     * @param end Timestamp to filter to.
     */
    getGames: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.getGames(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get shared games
     * Get shared games.
     * @param player1 Name of player 1
     * @param player2 Name of player 2
     */
    getHeadToHeadGames: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.getHeadToHeadGames(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get game punditry
     * Get game punditry.
     * @param at CSV of timestamps
     */
    getPunditry: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.getPunditry(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get recent games
     * Get recent games.
     * @param limit Maximum number of games to return
     */
    getRecent: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.getRecent(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Predict the outcome of a game
     * Predict the outcome of a game.
     * @param redElo Elo of red player
     * @param blueElo Elo of blue player
     */
    predict: function (params, options) {
        var fetchArgs = exports.GamesApiFetchParamCreator.predict(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * GamesApi - object-oriented interface
 */
var GamesApi = (function (_super) {
    __extends(GamesApi, _super);
    function GamesApi() {
        _super.apply(this, arguments);
    }
    /**
     * Add a game
     * Add a game.
     * @param redPlayer The player on red
     * @param redScore The red team score
     * @param bluePlayer The player on blue
     * @param blueScore The blue team score
     */
    GamesApi.prototype.addGame = function (params, options) {
        return exports.GamesApiFp.addGame(params, options)(this.fetch, this.basePath);
    };
    /**
     * Add a game
     * Add a game.
     * @param redPlayer The player on red
     * @param redScore The red team score
     * @param bluePlayer The player on blue
     * @param blueScore The blue team score
     */
    GamesApi.prototype.addGameRedirect = function (params, options) {
        return exports.GamesApiFp.addGameRedirect(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get a game
     * Get a game.
     * @param gameId Timestamp of the game
     */
    GamesApi.prototype.getGame = function (params, options) {
        return exports.GamesApiFp.getGame(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get games
     * Get games.
     * @param begin Timestamp to filter from.
     * @param end Timestamp to filter to.
     */
    GamesApi.prototype.getGames = function (params, options) {
        return exports.GamesApiFp.getGames(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get shared games
     * Get shared games.
     * @param player1 Name of player 1
     * @param player2 Name of player 2
     */
    GamesApi.prototype.getHeadToHeadGames = function (params, options) {
        return exports.GamesApiFp.getHeadToHeadGames(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get game punditry
     * Get game punditry.
     * @param at CSV of timestamps
     */
    GamesApi.prototype.getPunditry = function (params, options) {
        return exports.GamesApiFp.getPunditry(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get recent games
     * Get recent games.
     * @param limit Maximum number of games to return
     */
    GamesApi.prototype.getRecent = function (params, options) {
        return exports.GamesApiFp.getRecent(params, options)(this.fetch, this.basePath);
    };
    /**
     * Predict the outcome of a game
     * Predict the outcome of a game.
     * @param redElo Elo of red player
     * @param blueElo Elo of blue player
     */
    GamesApi.prototype.predict = function (params, options) {
        return exports.GamesApiFp.predict(params, options)(this.fetch, this.basePath);
    };
    return GamesApi;
})(BaseAPI);
exports.GamesApi = GamesApi;
;
/**
 * GamesApi - factory interface
 */
exports.GamesApiFactory = function (fetch, basePath) {
    return {
        /**
         * Add a game
         * Add a game.
         * @param redPlayer The player on red
         * @param redScore The red team score
         * @param bluePlayer The player on blue
         * @param blueScore The blue team score
         */
        addGame: function (params, options) {
            return exports.GamesApiFp.addGame(params, options)(fetch, basePath);
        },
        /**
         * Add a game
         * Add a game.
         * @param redPlayer The player on red
         * @param redScore The red team score
         * @param bluePlayer The player on blue
         * @param blueScore The blue team score
         */
        addGameRedirect: function (params, options) {
            return exports.GamesApiFp.addGameRedirect(params, options)(fetch, basePath);
        },
        /**
         * Get a game
         * Get a game.
         * @param gameId Timestamp of the game
         */
        getGame: function (params, options) {
            return exports.GamesApiFp.getGame(params, options)(fetch, basePath);
        },
        /**
         * Get games
         * Get games.
         * @param begin Timestamp to filter from.
         * @param end Timestamp to filter to.
         */
        getGames: function (params, options) {
            return exports.GamesApiFp.getGames(params, options)(fetch, basePath);
        },
        /**
         * Get shared games
         * Get shared games.
         * @param player1 Name of player 1
         * @param player2 Name of player 2
         */
        getHeadToHeadGames: function (params, options) {
            return exports.GamesApiFp.getHeadToHeadGames(params, options)(fetch, basePath);
        },
        /**
         * Get game punditry
         * Get game punditry.
         * @param at CSV of timestamps
         */
        getPunditry: function (params, options) {
            return exports.GamesApiFp.getPunditry(params, options)(fetch, basePath);
        },
        /**
         * Get recent games
         * Get recent games.
         * @param limit Maximum number of games to return
         */
        getRecent: function (params, options) {
            return exports.GamesApiFp.getRecent(params, options)(fetch, basePath);
        },
        /**
         * Predict the outcome of a game
         * Predict the outcome of a game.
         * @param redElo Elo of red player
         * @param blueElo Elo of blue player
         */
        predict: function (params, options) {
            return exports.GamesApiFp.predict(params, options)(fetch, basePath);
        },
    };
};
/**
 * LadderApi - fetch parameter creator
 */
exports.LadderApiFetchParamCreator = {
    /**
     * Get the ladder
     * Get the ladder.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     */
    getLadder: function (params, options) {
        var baseUrl = "/ladder/json";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "showInactive": params["showInactive"],
            "players": params["players"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get the ladder
     * Get the ladder.
     * @param begin Timestamp to filter from.
     * @param end Timestamp to filter to.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     */
    getLadderBetween: function (params, options) {
        // verify required parameter "begin" is set
        if (params["begin"] == null) {
            throw new Error("Missing required parameter begin when calling getLadderBetween");
        }
        // verify required parameter "end" is set
        if (params["end"] == null) {
            throw new Error("Missing required parameter end when calling getLadderBetween");
        }
        var baseUrl = "/ladder/{begin}/{end}/json"
            .replace("{" + "begin" + "}", "" + params["begin"])
            .replace("{" + "end" + "}", "" + params["end"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "showInactive": params["showInactive"],
            "players": params["players"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get the ladder
     * Get the ladder.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     * @param previousGames CSV of speculative games
     */
    speculate: function (params, options) {
        var baseUrl = "/speculate/json";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "showInactive": params["showInactive"],
            "players": params["players"],
            "previousGames": params["previousGames"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * LadderApi - functional programming interface
 */
exports.LadderApiFp = {
    /**
     * Get the ladder
     * Get the ladder.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     */
    getLadder: function (params, options) {
        var fetchArgs = exports.LadderApiFetchParamCreator.getLadder(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get the ladder
     * Get the ladder.
     * @param begin Timestamp to filter from.
     * @param end Timestamp to filter to.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     */
    getLadderBetween: function (params, options) {
        var fetchArgs = exports.LadderApiFetchParamCreator.getLadderBetween(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get the ladder
     * Get the ladder.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     * @param previousGames CSV of speculative games
     */
    speculate: function (params, options) {
        var fetchArgs = exports.LadderApiFetchParamCreator.speculate(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * LadderApi - object-oriented interface
 */
var LadderApi = (function (_super) {
    __extends(LadderApi, _super);
    function LadderApi() {
        _super.apply(this, arguments);
    }
    /**
     * Get the ladder
     * Get the ladder.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     */
    LadderApi.prototype.getLadder = function (params, options) {
        return exports.LadderApiFp.getLadder(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get the ladder
     * Get the ladder.
     * @param begin Timestamp to filter from.
     * @param end Timestamp to filter to.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     */
    LadderApi.prototype.getLadderBetween = function (params, options) {
        return exports.LadderApiFp.getLadderBetween(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get the ladder
     * Get the ladder.
     * @param showInactive Include inactive players
     * @param players Include detailed player info
     * @param previousGames CSV of speculative games
     */
    LadderApi.prototype.speculate = function (params, options) {
        return exports.LadderApiFp.speculate(params, options)(this.fetch, this.basePath);
    };
    return LadderApi;
})(BaseAPI);
exports.LadderApi = LadderApi;
;
/**
 * LadderApi - factory interface
 */
exports.LadderApiFactory = function (fetch, basePath) {
    return {
        /**
         * Get the ladder
         * Get the ladder.
         * @param showInactive Include inactive players
         * @param players Include detailed player info
         */
        getLadder: function (params, options) {
            return exports.LadderApiFp.getLadder(params, options)(fetch, basePath);
        },
        /**
         * Get the ladder
         * Get the ladder.
         * @param begin Timestamp to filter from.
         * @param end Timestamp to filter to.
         * @param showInactive Include inactive players
         * @param players Include detailed player info
         */
        getLadderBetween: function (params, options) {
            return exports.LadderApiFp.getLadderBetween(params, options)(fetch, basePath);
        },
        /**
         * Get the ladder
         * Get the ladder.
         * @param showInactive Include inactive players
         * @param players Include detailed player info
         * @param previousGames CSV of speculative games
         */
        speculate: function (params, options) {
            return exports.LadderApiFp.speculate(params, options)(fetch, basePath);
        },
    };
};
/**
 * PlayersApi - fetch parameter creator
 */
exports.PlayersApiFetchParamCreator = {
    /**
     * Get number of active players
     * Get number of active players.
     * @param at CSV of timestamps
     */
    getActive: function (params, options) {
        var baseUrl = "/activeplayers/json";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "at": params["at"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get per player stats
     * Get per player stats.
     * @param player ID of the player
     */
    getPerPlayerStats: function (params, options) {
        // verify required parameter "player" is set
        if (params["player"] == null) {
            throw new Error("Missing required parameter player when calling getPerPlayerStats");
        }
        var baseUrl = "/player/{player}/perplayerstats/json"
            .replace("{" + "player" + "}", "" + params["player"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get player info
     * Get player info.
     * @param player ID of the player
     */
    getPlayer: function (params, options) {
        // verify required parameter "player" is set
        if (params["player"] == null) {
            throw new Error("Missing required parameter player when calling getPlayer");
        }
        var baseUrl = "/player/{player}/json"
            .replace("{" + "player" + "}", "" + params["player"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get player&#39;s achievements
     * Get player&#39;s achievements.
     * @param player ID of the player
     */
    getPlayerAchievements: function (params, options) {
        // verify required parameter "player" is set
        if (params["player"] == null) {
            throw new Error("Missing required parameter player when calling getPlayerAchievements");
        }
        var baseUrl = "/player/{player}/achievements/json"
            .replace("{" + "player" + "}", "" + params["player"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get player&#39;s games
     * Get player&#39;s games.
     * @param player ID of the player
     */
    getPlayerGames: function (params, options) {
        // verify required parameter "player" is set
        if (params["player"] == null) {
            throw new Error("Missing required parameter player when calling getPlayerGames");
        }
        var baseUrl = "/player/{player}/games/json"
            .replace("{" + "player" + "}", "" + params["player"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PlayersApi - functional programming interface
 */
exports.PlayersApiFp = {
    /**
     * Get number of active players
     * Get number of active players.
     * @param at CSV of timestamps
     */
    getActive: function (params, options) {
        var fetchArgs = exports.PlayersApiFetchParamCreator.getActive(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get per player stats
     * Get per player stats.
     * @param player ID of the player
     */
    getPerPlayerStats: function (params, options) {
        var fetchArgs = exports.PlayersApiFetchParamCreator.getPerPlayerStats(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get player info
     * Get player info.
     * @param player ID of the player
     */
    getPlayer: function (params, options) {
        var fetchArgs = exports.PlayersApiFetchParamCreator.getPlayer(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get player&#39;s achievements
     * Get player&#39;s achievements.
     * @param player ID of the player
     */
    getPlayerAchievements: function (params, options) {
        var fetchArgs = exports.PlayersApiFetchParamCreator.getPlayerAchievements(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get player&#39;s games
     * Get player&#39;s games.
     * @param player ID of the player
     */
    getPlayerGames: function (params, options) {
        var fetchArgs = exports.PlayersApiFetchParamCreator.getPlayerGames(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PlayersApi - object-oriented interface
 */
var PlayersApi = (function (_super) {
    __extends(PlayersApi, _super);
    function PlayersApi() {
        _super.apply(this, arguments);
    }
    /**
     * Get number of active players
     * Get number of active players.
     * @param at CSV of timestamps
     */
    PlayersApi.prototype.getActive = function (params, options) {
        return exports.PlayersApiFp.getActive(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get per player stats
     * Get per player stats.
     * @param player ID of the player
     */
    PlayersApi.prototype.getPerPlayerStats = function (params, options) {
        return exports.PlayersApiFp.getPerPlayerStats(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get player info
     * Get player info.
     * @param player ID of the player
     */
    PlayersApi.prototype.getPlayer = function (params, options) {
        return exports.PlayersApiFp.getPlayer(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get player&#39;s achievements
     * Get player&#39;s achievements.
     * @param player ID of the player
     */
    PlayersApi.prototype.getPlayerAchievements = function (params, options) {
        return exports.PlayersApiFp.getPlayerAchievements(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get player&#39;s games
     * Get player&#39;s games.
     * @param player ID of the player
     */
    PlayersApi.prototype.getPlayerGames = function (params, options) {
        return exports.PlayersApiFp.getPlayerGames(params, options)(this.fetch, this.basePath);
    };
    return PlayersApi;
})(BaseAPI);
exports.PlayersApi = PlayersApi;
;
/**
 * PlayersApi - factory interface
 */
exports.PlayersApiFactory = function (fetch, basePath) {
    return {
        /**
         * Get number of active players
         * Get number of active players.
         * @param at CSV of timestamps
         */
        getActive: function (params, options) {
            return exports.PlayersApiFp.getActive(params, options)(fetch, basePath);
        },
        /**
         * Get per player stats
         * Get per player stats.
         * @param player ID of the player
         */
        getPerPlayerStats: function (params, options) {
            return exports.PlayersApiFp.getPerPlayerStats(params, options)(fetch, basePath);
        },
        /**
         * Get player info
         * Get player info.
         * @param player ID of the player
         */
        getPlayer: function (params, options) {
            return exports.PlayersApiFp.getPlayer(params, options)(fetch, basePath);
        },
        /**
         * Get player&#39;s achievements
         * Get player&#39;s achievements.
         * @param player ID of the player
         */
        getPlayerAchievements: function (params, options) {
            return exports.PlayersApiFp.getPlayerAchievements(params, options)(fetch, basePath);
        },
        /**
         * Get player&#39;s games
         * Get player&#39;s games.
         * @param player ID of the player
         */
        getPlayerGames: function (params, options) {
            return exports.PlayersApiFp.getPlayerGames(params, options)(fetch, basePath);
        },
    };
};
/**
 * StatsApi - fetch parameter creator
 */
exports.StatsApiFetchParamCreator = {
    /**
     * Get global stats
     * Get global stats.
     */
    getStats: function (options) {
        var baseUrl = "/stats/json";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * StatsApi - functional programming interface
 */
exports.StatsApiFp = {
    /**
     * Get global stats
     * Get global stats.
     */
    getStats: function (options) {
        var fetchArgs = exports.StatsApiFetchParamCreator.getStats(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * StatsApi - object-oriented interface
 */
var StatsApi = (function (_super) {
    __extends(StatsApi, _super);
    function StatsApi() {
        _super.apply(this, arguments);
    }
    /**
     * Get global stats
     * Get global stats.
     */
    StatsApi.prototype.getStats = function (options) {
        return exports.StatsApiFp.getStats(options)(this.fetch, this.basePath);
    };
    return StatsApi;
})(BaseAPI);
exports.StatsApi = StatsApi;
;
/**
 * StatsApi - factory interface
 */
exports.StatsApiFactory = function (fetch, basePath) {
    return {
        /**
         * Get global stats
         * Get global stats.
         */
        getStats: function (options) {
            return exports.StatsApiFp.getStats(options)(fetch, basePath);
        },
    };
};
